#!/usr/bin/env node

let cheerio = require('cheerio')
let fs = require('fs')

let raw = fs.readFileSync('/dev/stdin').toString()
    .replace(/<(xa|nota|ax)\b/g, '<a')    // fix random junk
    .replace(/<ximg\b/g, '<img')
let $ = cheerio.load(raw)

let title = $('title').text()
let body = $($('table')[1])

replace_with_contents(body, 'font')

let comment = body.find('i').first()
if (comment.text().trim()[0] === '(') comment.wrap('<div class="part">')

body.find('img[src*="yimg.com"]').remove()
body.find('img[src*="virtumundo.com"]').remove()
body.find('img[src="http://ycombinator.com/images/y18.gif"]').remove()
body.find('a[href*="reddit.com"] img').remove()

body = body.html().replace(/<br><br>/g, '</p><p>')
    // separate the article text form the notes
    .replace(/<p>\s*?<b>Notes:?<\/b><\/p>/g, '</div>$&')
//    .replace(/<p>\s*?<b>([^<>]+)<\/b><\/p>/g, '<h3>$1</h3>')

let html = `<!doctype html>
<meta charset="utf-8">
<title>${title}</title>
<meta name="author" content="Paul Graham">
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
  div p { margin: 0; padding: 0; }
  div p + p { text-indent: 2em; }
  .part,center { margin: 1em 0; }
</style>

<h2 class="title">${title}</h2>

<div><p>${body}</p>`

// get date
$ = cheerio.load(html)
let date = '((January|February|March|April|May|June|July|August|September|October|November|December)\\s+\\d{4})'
let found = false
let re = new RegExp(`^${date}(\\s*|,\\s+(corrected|rev\\.?)\\s+${date}|\\s+\\(rev\\.\\s+${date}\\))$`)
$('p').each( (_,v) => {
    let text = $(v).text().trim()
    let m = text.match(re); if (m) {
        found = true
        return !$(v).replaceWith(`<div class="part"><time datetime=${new Date(m[1]).toISOString()}>${text}</time></div>`)
    }
})

if (!found) console.error(111, 'failed to extract date')

rename($, 'p > b', '<h3>')

process.stdout.write($.html())


function rename($, from, to) {
    $(from).each( (_, v) => {
        if (v.prev && v.prev.type === 'text' && v.prev.data.trim()) {
            console.error(222, `refusing to rename ${from} to ${to}: ${$(v).contents()}`)
            return
        }
        $(v).replaceWith(function() {
            return $(to).append($(this).contents())
        })
    })
}

function replace_with_contents(chnode, query) {
    chnode.find(query).replaceWith(function() { return $(this).contents() })
}
